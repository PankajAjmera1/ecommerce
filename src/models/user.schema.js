import mongoose from "mongoose";
import AuthRoles from "../utils/authRoles.js";
import bcrypt from "bcryptjs"
import JWT from "jsonwebtoken"
import config from "../config/index.js";
import crypto from "crypto"

const userSchema = new mongoose.Schema({
    
    name:{
        type:String,
        required:[true,"Name is required"],
        trim:true,
        maxLength: [60,"Name must be less than 60 characters"],
    },
    email:{
        type:String,
        required:[true,"Email is required"],
    },
    password:{
        type:String,
        required:[true,"Password is required"],
        minLength:[8,"Password must be at least 8 characters"],
        select:false
    },
    role:{
        type:String,
        enum:Object.values(AuthRoles),
        default:AuthRoles.USER

    },
    forgotPasswordToken:String,
    forgotPasswordExpiry:Date

},{timestamps:true})

//encrypt password before saving:using Mongoose pre hooks

userSchema.pre("save",async function(next){
    if(!this.isModified("password")) return next()

    this.password = await bcrypt.hash(this.password,10)

    next()

})

//compare password
userSchema.methods={

    comparePassword:async function(enteredPassword){
      return await bcrypt.compare(enteredPassword,this.password)
    },

    //generate JWT token
    getJWTToken: function(){
       return JWT.sign({_id:this._id,role:this.role},config.JWT_SECRET,
            {
                expiresIn:config.JWT_EXPIRY

            })
    },

    //generate forgot password token
    generateForgotPasswordToken: function(){
       const forgotToken = crypto.randomBytes(20).toString("hex")

       //encrypting token generated by crypto
       this.forgotPasswordToken = crypto
       .createHash("sha256")
       .update(forgotToken)
       .digest("hex")
       //time for token to expire 
       this.forgotPasswordExpiry = Date.now() + 20 * 60 * 1000 //20 minutes

       return forgotToken

    }

}


export default mongoose.model("User",userSchema)

